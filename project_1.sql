CREATE DATABASE SALESS ;
USE SALESS ;
CREATE TABLE SALESS_1
(
  TRANSACTION_ID INTEGER UNIQUE ,
  EMPLOYEE_ID INTEGER UNIQUE,
  CUSTOMER_NAME VARCHAR(50),
  EMPLOYEE_NAME VARCHAR(50),
  PRODUCT_NAME VARCHAR(50),
  PRODUCT_CATEGORY VARCHAR(50),
  STORE_NAME VARCHAR(50),
  SALES_AMOUNT DECIMAL(20,5),
  EMPLOYEE_REVIEW INTEGER 
  );
  INSERT INTO SALESS_1 (TRANSACTION_ID, EMPLOYEE_ID, CUSTOMER_NAME, EMPLOYEE_NAME, PRODUCT_NAME, PRODUCT_CATEGORY, STORE_NAME, SALES_AMOUNT, EMPLOYEE_REVIEW) VALUES
  (1,1,'SMITH','JOHNSON','PRODUCT A','CATEGORY A','STORE A',1000.78,5),
  (2,2,'JONES','LEWIS','PRODUCT B','CATEGORY B','STORE B',120.00,4);
  INSERT INTO SALESS_1 (TRANSACTION_ID, EMPLOYEE_ID, CUSTOMER_NAME, EMPLOYEE_NAME, PRODUCT_NAME, PRODUCT_CATEGORY, STORE_NAME, SALES_AMOUNT, EMPLOYEE_REVIEW) VALUES
  (3,3,'TAYLOR','WALKER','PRODUCT C','CATEGORY A','STORE A',1500.90,3),
  (4,4,'WILLIAMS','ROBINSON','PRODUCT D','CATEGORY A','STORE A',140.89,4),
  (5,5,'BROWN','WOOD','PRODUCT E','CATEGORY A','STORE B',14000.00,5),
  (6,6,'DAVIES','THOMAS','PRODUCT F','CATEGORY A','STORE B',89.00,2),
  (7,7,'EVANS','WILL','PRODUCT G','CATEGORY A','STORE A',1300.00,3),
  (8,8,'WILSON','WATSON','PRODUCT H','CATEGORY A','STORE B',2000.00,1),
  (9,9,'TOM','JACK','PRODUCT I','CATEGORY A','STORE B',15000.00,5),
  (10,10,'ROBET','MIKE','PRODUCT J','CATEGORY A','STORE C',140.89,4);
  
  -- LIST THE THREE STORES WITH HIGHEST NUMBER OF CUSTOMER TRANSACTION
  SELECT STORE_NAME, COUNT(*) AS TRANSACTION_1 FROM SALESS_1
  GROUP BY STORE_NAME
  ORDER BY TRANSACTION_1 DESC
  LIMIT 3;
  -- EXTRACT EMPLOYEE IDS FOR ALL EMPLOYEES WHO EARNED A THREE OR HIGH ON THIER LAST PERFORMANCE REVIEW
  SELECT * FROM SALESS_1 
  WHERE EMPLOYEE_REVIEW >= 3;
  -- CALCULATE AVERAGE MONTHLY SALES BY PRODUCT DISPLAYED IN DESCENDING ORDER
  SELECT PRODUCT_NAME, AVG(SALES_AMOUNT) AS AVERAGE_SALES
  FROM SALESS_1
  GROUP BY PRODUCT_NAME
  ORDER BY AVERAGE_SALES DESC;
  -- FIND AND REMOVE DUPLICATE IN THE TABLE WITHOUT CREATING ANOTHER TABLE 
  SELECT DISTINCT PRODUCT_NAME FROM SALESS_1;
  SELECT DISTINCT STORE_NAME FROM SALESS_1;
  SELECT DISTINCT PRODUCT_CATEGORY FROM SALESS_1;
  -- IDENTIFY COMMON RECORDS BETWEEN TWO TABLES 
  -- CREATING TABLE SALESS_2 FOR THE JOIN 
  CREATE TABLE SALESS_2 
  (
   SALESS_IDD INT NOT NULL AUTO_INCREMENT PRIMARY KEY,
   CUSTOMER_NAME VARCHAR(50) NOT NULL,
   EMPLOYEE_IDD INT NOT NULL,
   PRODUCT_NAME VARCHAR(50) NOT NULL,
   PRODUCT_CATEGORY VARCHAR(50) NOT NULL,
   SALESS_AMOUNT DECIMAL(20,5) NOT NULL,
   FOREIGN KEY (EMPLOYEE_IDD) REFERENCES SALESS_1(TRANSACTION_ID)
   );
   INSERT INTO SALESS_2 (SALESS_IDD, CUSTOMER_NAME, EMPLOYEE_IDD, PRODUCT_NAME, PRODUCT_CATEGORY, SALESS_AMOUNT) VALUES
   
   (1,'STEVE',1,'PRODUCT K', 'CATEGORY X',139.00),
   (2,'NANCY',2,'PRODUCT K', 'CATEGORY Y',139.00),
   (3,'SMITH',3,'PRODUCT A', 'CATEGORY A',1500.90),
   (4,'JONES',4,'PRODUCT B', 'CATEGORY B',140.89),
   (5,'TAYLOR',5,'PRODUCT B', 'CATEGORY A',14000.00),
   (6,'CLAY',6,'PRODUCT K', 'CATEGORY Z',139.00),
   (7,'JUSTIN',7,'PRODUCT K', 'CATEGORY X',139.00),
   (8,'HANNAH',8,'PRODUCT K', 'CATEGORY Y',139.00),
   (9,'JESSICA',9,'PRODUCT K', 'CATEGORY Z',139.00);
   
   -- FINDING SAME RECORDS
   SELECT * FROM SALESS_1
   INNER JOIN SALESS_2
   ON SALESS_1.CUSTOMER_NAME = SALESS_2.CUSTOMER_NAME;
   
   
   
   
  

  
  
  
  
  